1.
Посчитайте, сколько компаний закрылось.

SELECT COUNT(id)
FROM company
WHERE status = 'closed';

2.
Отобразите количество привлечённых средств для новостных компаний США. Используйте данные из таблицы company. Отсортируйте таблицу по убыванию значений в поле funding_total .

SELECT SUM(funding_total)
FROM company
WHERE category_code = 'news' AND country_code = 'USA'
GROUP BY name
ORDER BY SUM(funding_total) DESC;

3.
Найдите общую сумму сделок по покупке одних компаний другими в долларах. Отберите сделки, которые осуществлялись только за наличные с 2011 по 2013 год включительно.

SELECT SUM(price_amount)
FROM acquisition
WHERE term_code = 'cash' AND (EXTRACT(YEAR FROM CAST(acquired_at AS date)) BETWEEN '2011' AND '2013');

4.
Отобразите имя, фамилию и названия аккаунтов людей в твиттере, у которых названия аккаунтов начинаются на 'Silver'.

SELECT first_name,
       last_name,
       twitter_username
FROM people
WHERE twitter_username LIKE 'Silver%'

5.
Выведите на экран всю информацию о людях, у которых названия аккаунтов в твиттере содержат подстроку 'money', а фамилия начинается на 'K'.

SELECT *
FROM people
WHERE twitter_username LIKE '%money%' AND last_name LIKE 'K%';


6.
Для каждой страны отобразите общую сумму привлечённых инвестиций, которые получили компании, зарегистрированные в этой стране. Страну, в которой зарегистрирована компания, можно определить по коду страны. Отсортируйте данные по убыванию суммы.

SELECT country_code,
       SUM(funding_total)
FROM company
GROUP BY country_code
ORDER BY SUM(funding_total) DESC;

7.
Составьте таблицу, в которую войдёт дата проведения раунда, а также минимальное и максимальное значения суммы инвестиций, привлечённых в эту дату.
Оставьте в итоговой таблице только те записи, в которых минимальное значение суммы инвестиций не равно нулю и не равно максимальному значению.

SELECT funded_at,
       MIN(raised_amount),
       MAX(raised_amount)
FROM funding_round
GROUP BY funded_at
HAVING MIN(raised_amount) != 0 AND MIN(raised_amount) != MAX(raised_amount);

8.
Создайте поле с категориями:
Для фондов, которые инвестируют в 100 и более компаний, назначьте категорию high_activity.
Для фондов, которые инвестируют в 20 и более компаний до 100, назначьте категорию middle_activity.
Если количество инвестируемых компаний фонда не достигает 20, назначьте категорию low_activity.
Отобразите все поля таблицы fund и новое поле с категориями.

select *,
       case
           when invested_companies >= 100 then 'high_activity'
           when invested_companies < 100 and invested_companies >= 20 then 'middle_activity'
           when invested_companies < 20 then 'low_activity'
       end
from fund;  

9.
Для каждой из категорий, назначенных в предыдущем задании, посчитайте округлённое до ближайшего целого числа среднее количество инвестиционных раундов, в которых фонд принимал участие. Выведите на экран категории и среднее число инвестиционных раундов. Отсортируйте таблицу по возрастанию среднего.

SELECT CASE
           WHEN invested_companies>=100 THEN 'high_activity'
           WHEN invested_companies>=20 THEN 'middle_activity'
           ELSE 'low_activity'
       END AS activity,
       ROUND(AVG(investment_rounds)) as average
FROM fund
GROUP BY activity
ORDER BY average;



10.
Проанализируйте, в каких странах находятся фонды, которые чаще всего инвестируют в стартапы.
Для каждой страны посчитайте минимальное, максимальное и среднее число компаний, в которые инвестировали фонды этой страны, основанные с 2010 по 2012 год включительно. Исключите страны с фондами, у которых минимальное число компаний, получивших инвестиции, равно нулю. Выгрузите десять самых активных стран-инвесторов.
Отсортируйте таблицу по среднему количеству компаний от большего к меньшему, а затем по коду страны в лексикографическом порядке.

select country_code,
       min(invested_companies),
       max(invested_companies),
       avg(invested_companies)
from fund
where extract(year from cast(founded_at as date)) between '2010' and '2012'
group by country_code
having min(invested_companies) > 0
order by avg(invested_companies) desc,
         country_code
limit 10;


11.
Отобразите имя и фамилию всех сотрудников стартапов. Добавьте поле с названием учебного заведения, которое окончил сотрудник, если эта информация известна.

select p.first_name,
       p.last_name,
       e.instituition
from people as p
left join education as e on p.id=e.person_id;

12.
Для каждой компании найдите количество учебных заведений, которые окончили её сотрудники. Выведите название компании и число уникальных названий учебных заведений. Составьте топ-5 компаний по количеству университетов.

with
c as (select id,
             name
      from company),
p as (select id,
             company_id
      from people),
u as (select person_id,
             instituition
      from education)
select c.name,
       count(distinct u.instituition)
from c 
join p on c.id=p.company_id
join u on p.id=u.person_id
group by c.name
order by count(distinct u.instituition) desc
limit 5;


13.
Составьте список с уникальными названиями закрытых компаний, для которых первый раунд финансирования оказался последним.

select distinct c.name
from company as c
left join funding_round as fr on c.id=fr.company_id
where c.status = 'closed' and fr.is_first_round = 1 and fr.is_last_round = 1;

14.
Составьте список уникальных номеров сотрудников, которые работают в компаниях, отобранных в предыдущем задании.

select distinct p.id
from people as p
where p.company_id in 
      (select distinct c.id
       from company as c
       left join funding_round as fr on c.id=fr.company_id
       where c.status = 'closed' and fr.is_first_round = 1 and fr.is_last_round = 1);
       

15.
Составьте таблицу, куда войдут уникальные пары с номерами сотрудников из предыдущей задачи и учебным заведением, которое окончил сотрудник.

with
un_p as (select distinct p.id as person
         from people as p
         where p.company_id in 
               (select distinct c.id
                from company as c
                left join funding_round as fr on c.id=fr.company_id
                where c.status = 'closed' and fr.is_first_round = 1 and fr.is_last_round = 1)),
uni as (select distinct p.id as person,
               e.instituition as university
       from people as p
       join education as e on p.id=e.person_id)

select distinct un_p.person,
       uni.university
from un_p join uni on un_p.person=uni.person

16.
Посчитайте количество учебных заведений для каждого сотрудника из предыдущего задания. При подсчёте учитывайте, что некоторые сотрудники могли окончить одно и то же заведение дважды

with
un_p as (select  p.id as person      --уникальные сотрудники из компаний
         from people as p                    --которые были закрыты после первого раунда
         where p.company_id in 
               (select c.id
                from company as c
                left join funding_round as fr on c.id=fr.company_id
                where c.status = 'closed' and fr.is_first_round = 1 and fr.is_last_round = 1)),
uni as (select p.id as person,
               e.instituition as university
       from people as p
       join education as e on p.id=e.person_id)

select un_p.person,
       COUNT(uni.university)
from un_p join uni on un_p.person=uni.person
GROUP BY un_p.person
order by COUNT(uni.university) DESC;


17.
Дополните предыдущий запрос и выведите среднее число учебных заведений (всех, не только уникальных), которые окончили сотрудники разных компаний. Нужно вывести только одну запись, группировка здесь не понадобится.

with
un_p as (select  p.id as person      
         from people as p                    
         where p.company_id in 
               (select c.id
                from company as c
                left join funding_round as fr on c.id=fr.company_id
                where c.status = 'closed' and fr.is_first_round = 1 and fr.is_last_round = 1)),
uni as (select p.id as person,
               e.instituition as university
       from people as p
       join education as e on p.id=e.person_id)

select avg(un_avg.count)
from 
  (select un_p.person,
         COUNT(uni.university)
   from un_p join uni on un_p.person=uni.person
   GROUP BY un_p.person
   order by COUNT(uni.university) DESC) as un_avg;


18.
Напишите похожий запрос: выведите среднее число учебных заведений (всех, не только уникальных), которые окончили сотрудники Facebook*.
*(сервис, запрещённый на территории РФ)


select avg(f.count)
from 
  (select p.id,
          count(e.instituition)
   from education as e
   join people as p on e.person_id=p.id
   where p.id in 
             (select distinct p.id
              from people as p
              join company as c on p.company_id=c.id
              where c.name = 'Facebook')
  group by p.id) as f;
  
19.
Составьте таблицу из полей:
name_of_fund — название фонда;
name_of_company — название компании;
amount — сумма инвестиций, которую привлекла компания в раунде.
В таблицу войдут данные о компаниях, в истории которых было больше шести важных этапов, а раунды финансирования проходили с 2012 по 2013 год включительно.

SELECT f.name AS name_of_fund,
      c.name AS name_of_company,
      fr.raised_amount AS amount
FROM investment AS i
JOIN company AS c ON i.company_id=c.id
JOIN fund AS f ON i.fund_id=f.id
JOIN funding_round AS fr ON fr.id = i.funding_round_id
WHERE c.milestones > 6 AND (EXTRACT(YEAR FROM CAST(fr.funded_at AS date)) IN (2012, 2013))
--GROUP BY name_of_fund, name_of_company
ORDER BY name_of_fund;

20.
Выгрузите таблицу, в которой будут такие поля:
название компании-покупателя;
сумма сделки;
название компании, которую купили;
сумма инвестиций, вложенных в купленную компанию;
доля, которая отображает, во сколько раз сумма покупки превысила сумму вложенных в компанию инвестиций, округлённая до ближайшего целого числа.
Не учитывайте те сделки, в которых сумма покупки равна нулю. Если сумма инвестиций в компанию равна нулю, исключите такую компанию из таблицы.
Отсортируйте таблицу по сумме сделки от большей к меньшей, а затем по названию купленной компании в лексикографическом порядке. Ограничьте таблицу первыми десятью записями.

SELECT b.name AS buyer,
       a.price_amount AS price,
       s.name AS saller,
       s.funding_total AS fund,
       ROUND (a.price_amount/s.funding_total) AS perc
FROM acquisition AS a
JOIN company AS b ON a.acquiring_company_id= b.id 
JOIN company AS s ON a.acquired_company_id=s.id
GROUP BY b.name,
         a.price_amount,
         s.name,
         s.funding_total
HAVING a.price_amount != 0 AND s.funding_total !=0
ORDER BY a.price_amount DESC,
         s.name
LIMIT 10


21.
Выгрузите таблицу, в которую войдут названия компаний из категории social, получившие финансирование с 2010 по 2013 год включительно. Проверьте, что сумма инвестиций не равна нулю. Выведите также номер месяца, в котором проходил раунд финансирования.

SELECT c.name,
       EXTRACT(MONTH FROM CAST(fr.funded_at AS date))
FROM company AS c
JOIN funding_round as fr ON c.id=fr.company_id
WHERE fr.raised_amount != 0 
      AND c.category_code = 'social'
      AND EXTRACT(YEAR FROM CAST(fr.funded_at AS date)) BETWEEN '2010' AND '2013'
      


22.
Отберите данные по месяцам с 2010 по 2013 год, когда проходили инвестиционные раунды. Сгруппируйте данные по номеру месяца и получите таблицу, в которой будут поля:
номер месяца, в котором проходили раунды;
количество уникальных названий фондов из США, которые инвестировали в этом месяце;
количество компаний, купленных за этот месяц;
общая сумма сделок по покупкам в этом месяце.

with
funds as (select extract(month from cast(fr.funded_at as date)) as month,
                 count(distinct f.name) as fund_count
          from fund as f
          left join investment as i on f.id=i.fund_id
          left join funding_round as fr on i.funding_round_id=fr.id
          where f.country_code = 'USA' and (extract(year from cast(fr.funded_at as date)) between '2010' and '2013')
          group by month),
com as (select extract(month from cast(a.acquired_at as date)) as month,
               count(a.acquired_company_id) as com_count,
               sum(a.price_amount) as price
        from acquisition as a
        where extract(year from cast(a.acquired_at as date)) between '2010' and '2013'
        group by month)
select funds.month,
       funds.fund_count,
       com.com_count,
       com.price
from funds 
join com on funds.month=com.month


23.
Составьте сводную таблицу и выведите среднюю сумму инвестиций для стран, в которых есть стартапы, зарегистрированные в 2011, 2012 и 2013 годах. Данные за каждый год должны быть в отдельном поле. Отсортируйте таблицу по среднему значению инвестиций за 2011 год от большего к меньшему.


with
country as (select distinct country_code as code
            from company
            where extract(year from cast(founded_at as date)) in ('2011','2012','2013')),

y2011 as (select country_code as country,
                 avg(funding_total) as invest
          from company as c 
          where extract(year from cast(c.founded_at as date))='2011'
          group by country),
y2012 as (select country_code as country,
                 avg(funding_total) as invest
          from company as c 
          where extract(year from cast(c.founded_at as date))='2012'
          group by country),
y2013 as (select country_code as country,
                 avg(funding_total) as invest
          from company as c 
          where extract(year from cast(c.founded_at as date))='2013'
          group by country)
select --country.code,
       y2011.country,
       y2011.invest as i2011,
       y2012.invest as i2012,
       y2013.invest as i2013
from y2011 --country 
--left join y2011 on country.code=y2011.country
join y2012 on y2011.country=y2012.country
join y2013 on y2011.country=y2013.country
order by y2011.invest desc
